container-fixed(max_width = content_max_width)
  margin-right 15px
  margin-left 15px
  padding-left (grid_gutter / 2)
  padding-right (grid_gutter / 2)
  clearfix()

  @media menu-full
    margin-right 30px
    margin-left 30px
  @media screen_large_min
    margin-left auto
    margin-right auto
    max-width max_width

make-row(gutter = grid_gutter)
  margin-left (gutter / -1)
  margin-right (gutter / -1)
  clearfix()

make-tiny-column(columns, gutter = grid_gutter)
  position relative
  float left
  width unit(columns / grid_columns * 100, '%')
  min-height 1px
  padding-left (gutter / 2)
  padding-right (gutter / 2)
  
make-tiny-column-before(columns)
  margin-left unit(columns / grid_columns * 100, '%')
  
make-tiny-column-after(columns)
  margin-right unit(columns / grid_columns * 100, '%')

make-tiny-column-push(columns)
  left unit(columns / grid_columns * 100, '%')

make-tiny-column-pull(columns)
  right unit(columns / grid_columns * 100, '%')

make-small-column(columns, gutter = grid_gutter)
  position relative
  min-height 1px
  padding-left (gutter / 2)
  padding-right (gutter / 2)
  @media screen_small_min
    float left
    width unit(columns / grid_columns * 100, '%')

make-small-column-before(columns)
  @media screen_small_min
    margin-left unit(columns / grid_columns * 100, '%')
    
make-small-column-after(columns)
  @media screen_small_min
    margin-right unit(columns / grid_columns * 100, '%')

make-small-column-push(columns)
  @media screen_small_min
    left unit(columns / grid_columns * 100, '%')

make-small-column-pull(columns)
  @media screen_small_min
    right unit(columns / grid_columns * 100, '%')

make-medium-column(columns, gutter = grid_gutter)
  position relative
  min-height 1px
  padding-left (gutter / 2)
  padding-right (gutter / 2)
  @media screen_medium_min
    float left
    width unit(columns / grid_columns * 100, '%')

make-medium-column-before(columns)
  @media screen_medium_min
    margin-left unit(columns / grid_columns * 100, '%')
    
make-medium-column-after(columns)
  @media screen_medium_min
    margin-right unit(columns / grid_columns * 100, '%')

make-medium-column-push(columns)
  @media screen_medium_min
    left unit(columns / grid_columns * 100, '%')

make-medium-column-pull(columns)
  @media screen_medium_min
    right unit(columns / grid_columns * 100, '%')

make-large-column(columns, gutter = grid_gutter)
  position relative
  min-height 1px
  padding-left (gutter / 2)
  padding-right (gutter / 2)
  @media screen_large_min
    float left
    width unit(columns / grid_columns * 100, '%')

make-large-column-before(columns)
  @media screen_large_min
    margin-left unit(columns / grid_columns * 100, '%')
    
make-large-column-after(columns)
  @media screen_large_min
    margin-right unit(columns / grid_columns * 100, '%')

make-large-column-push(columns)
  @media screen_large_min
    left unit(columns / grid_columns * 100, '%')

make-large-column-pull(columns)
  @media screen_large_min
    right unit(columns / grid_columns * 100, '%')

.container
  container-fixed()

.row
  make-row()

for column_num in (1..grid_columns)
  .col-t-{column_num},
  .col-s-{column_num},
  .col-m-{column_num},
  .col-l-{column_num}
    position relative
    min-height 1px
    padding-left (grid_gutter / 2)
    padding-right (grid_gutter / 2)

for column_num in (1..(grid_columns - 1))
  .col-t-{column_num}
    float left

for column_num in (1..grid_columns)
  .col-t-{column_num}
    width unit(column_num / grid_columns * 100, '%')

for column_num in (0..(grid_columns - 1))
  .col-t-before-{column_num}
    margin-left unit(column_num / grid_columns * 100, '%')
for column_num in (0..(grid_columns - 1))
  .col-t-after-{column_num}
    margin-right unit(column_num / grid_columns * 100, '%')
for column_num in (0..(grid_columns - 1))
  .col-t-push-{column_num}
    left unit(column_num / grid_columns * 100, '%')
for column_num in (0..(grid_columns - 1))
  .col-t-pull-{column_num}
    right unit(column_num / grid_columns * 100, '%')

@media screen_small_min

  for column_num in (1..(grid_columns - 1))
    .col-s-{column_num}
      float left

  for column_num in (1..grid_columns)
    .col-s-{column_num}
      width unit(column_num / grid_columns * 100, '%')

  for column_num in (0..(grid_columns - 1))
    .col-s-before-{column_num}
      margin-left unit(column_num / grid_columns * 100, '%')
  for column_num in (0..(grid_columns - 1))
    .col-s-after-{column_num}
      margin-right unit(column_num / grid_columns * 100, '%')
  for column_num in (0..(grid_columns - 1))
    .col-s-push-{column_num}
      left unit(column_num / grid_columns * 100, '%')
  for column_num in (0..(grid_columns - 1))
    .col-s-pull-{column_num}
      right unit(column_num / grid_columns * 100, '%')

@media screen_medium_min

  for column_num in (1..(grid_columns - 1))
    .col-m-{column_num}
      float left

  for column_num in (1..grid_columns)
    .col-m-{column_num}
      width unit(column_num / grid_columns * 100, '%')

  for column_num in (0..(grid_columns - 1))
    .col-m-before-{column_num}
      margin-left unit(column_num / grid_columns * 100, '%')
  for column_num in (0..(grid_columns - 1))
    .col-m-after-{column_num}
      margin-right unit(column_num / grid_columns * 100, '%')
  for column_num in (0..(grid_columns - 1))
    .col-m-push-{column_num}
      left unit(column_num / grid_columns * 100, '%')
  for column_num in (0..(grid_columns - 1))
    .col-m-pull-{column_num}
      right unit(column_num / grid_columns * 100, '%')

@media screen_large_min

  for column_num in (1..(grid_columns - 1))
    .col-l-{column_num}
      float left

  for column_num in (1..grid_columns)
    .col-l-{column_num}
      width unit(column_num / grid_columns * 100, '%')

  for column_num in (0..(grid_columns - 1))
    .col-l-before-{column_num}
      margin-left unit(column_num / grid_columns * 100, '%')
  for column_num in (0..(grid_columns - 1))
    .col-l-after-{column_num}
      margin-right unit(column_num / grid_columns * 100, '%')
  for column_num in (0..(grid_columns - 1))
    .col-l-push-{column_num}
      left unit(column_num / grid_columns * 100, '%')
  for column_num in (0..(grid_columns - 1))
    .col-l-pull-{column_num}
      right unit(column_num / grid_columns * 100, '%')
